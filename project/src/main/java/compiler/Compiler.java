/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package compiler;

import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import compiler.Lexer.Lexer;
import compiler.Parser.ASTNode;
import compiler.Parser.Parser;
import compiler.Parser.Program;
import compiler.Semantic.SemanticAnalysis;
import compiler.CodeGen.CodeGen;

public class Compiler {
    public static void main(String[] args) {

        String srcPath = args[0];
        Path src = Paths.get(srcPath);

        String outPath = null;
        // scan for -o
        for (int i = 1; i < args.length; i++) {
            if ("-o".equals(args[i]) && i + 1 < args.length) {
                outPath = args[++i];
            }
        }
        if (outPath == null) {
            // no -o: place Class in the same directory as src
            Path parent = src.getParent();
            if (parent == null) parent = Paths.get(".");
            String baseName = src.getFileName().toString();
            if (baseName.endsWith(".lang")) {
                baseName = baseName.substring(0, baseName.length() - 5);
            }
            outPath = parent.resolve(baseName + ".class").toString();
        }
        // 2) Ensure output directory exists
        Path target = Paths.get(outPath);
        Path targetDir = target.getParent();
        if (targetDir != null && !Files.exists(targetDir)) {
            try {
                Files.createDirectories(targetDir);
            } catch (IOException e) {
                System.err.println("Cannot create output directory: " + e.getMessage());
                System.exit(1);
            }
        }

        try (FileReader reader = new FileReader(srcPath)) {
            Lexer lexer = new Lexer(reader);


            Parser parser = new Parser(lexer);
            ASTNode node = parser.parseProgram();

            // Perform sema// n// tic analysis
            SemanticAnalysis semanticAnalysis = new SemanticAnalysis();
            node.accept(semanticAnalysis);

            if (semanticAnalysis.hasErrors()) {
                System.err.println("Semantic errors found:");
                semanticAnalysis.printErrors();
                System.exit(2);
            } else {
                System.out.println("Semantic analysis completed successfully.");
                Path parent = Paths.get(outPath).getParent();
                System.out.println("Parent directory: " + parent);
                if (parent != null && !Files.exists(parent)) {
                    Files.createDirectories(parent);
                }
                // invoke your CodeGen
                new CodeGen((Program) node, outPath).generate();
                System.out.println("Code generation successful â†’ " + outPath);
                System.exit(0);
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
            e.printStackTrace(System.err);
            System.exit(1);
        }
    }
}












